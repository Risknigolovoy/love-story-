document.addEventListener('DOMContentLoaded', () => {
    // --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ö–û–ù–°–¢–ê–ù–¢–´ ---
    const BIN_ID = '687ebac9f7e7a370d1eba7fa';
    const API_KEY = '$2a$10$EIdkYYUdFQ6kRpT0OobuU.YjsENOEz9Un3ljT398QIIR0nRqXmFEq';
    const API_URL = `https://api.jsonbin.io/v3/b/${BIN_ID}`;
    const HEADERS = {
        'Content-Type': 'application/json',
        'X-Master-Key': API_KEY
    };
    const USER_CODES = {
        '06112002': 'He',
        '18092000': 'She'
    };
    const POLLING_INTERVAL = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

    // --- –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ---
    let currentUser = null;
    let appData = null;
    let pollingIntervalId = null;
    let isUpdating = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π

    // --- DOM –≠–õ–ï–ú–ï–ù–¢–´ ---
    const loader = document.getElementById('loader');
    const loginScreen = document.getElementById('login-screen');
    const appScreen = document.getElementById('app');
    const loginButton = document.getElementById('login-button');
    const loginCodeInput = document.getElementById('login-code');
    const loginError = document.getElementById('login-error');

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    function init() {
        // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑—á–∏–∫ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã
        setTimeout(() => {
            loader.style.opacity = '0';
            setTimeout(() => {
                loader.classList.add('hidden');
                loginScreen.classList.remove('hidden');
                loginScreen.style.opacity = '1';
            }, 500);
        }, 5000);

        loginButton.addEventListener('click', handleLogin);
        loginCodeInput.addEventListener('keyup', (e) => {
            if (e.key === 'Enter') handleLogin();
        });
    }

    // --- –õ–û–ì–ò–ö–ê –í–•–û–î–ê ---
    async function handleLogin() {
        const code = loginCodeInput.value;
        const user = USER_CODES[code];
        if (user) {
            currentUser = user;
            loginError.classList.add('hidden');
            await startApp();
        } else {
            loginError.classList.remove('hidden');
        }
    }

    // --- –ó–ê–ü–£–°–ö –û–°–ù–û–í–ù–û–ì–û –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
    async function startApp() {
        loginScreen.style.opacity = '0';
        setTimeout(() => {
            loginScreen.classList.add('hidden');
            appScreen.classList.remove('hidden');
            appScreen.style.opacity = '1';
        }, 500);

        await fetchAndInitializeData();
        setupEventListeners();
        startPolling();
    }
    
    // --- –†–ê–ë–û–¢–ê –° API JSONBIN.IO ---

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    async function fetchAndInitializeData() {
        try {
            const response = await fetch(`${API_URL}/latest`, { headers: { ...HEADERS, 'X-Bin-Meta': false } });
            if (response.status === 404 || response.headers.get('content-length') === '0') {
                console.log('Bin is empty or not found. Initializing...');
                await initializeBin();
            } else {
                appData = await response.json();
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
                if (!isDataStructureValid(appData)) {
                    console.log('Data structure is invalid. Re-initializing...');
                    await initializeBin();
                }
            }
        } catch (error) {
            console.error('Error fetching data:', error);
            // –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
            await initializeBin();
        }
        renderApp();
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    async function initializeBin() {
        const defaultData = getDefaultDataStructure();
        await updateData(defaultData);
        appData = defaultData;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async function updateData(data) {
        if (isUpdating) return;
        isUpdating = true;
        try {
            await fetch(API_URL, {
                method: 'PUT',
                headers: HEADERS,
                body: JSON.stringify(data)
            });
            appData = data; // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        } catch (error) {
            console.error('Error updating data:', error);
        } finally {
            isUpdating = false;
        }
    }

    // --- –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø (–ü–û–õ–õ–ò–ù–ì) ---
    function startPolling() {
        if (pollingIntervalId) clearInterval(pollingIntervalId);
        pollingIntervalId = setInterval(async () => {
            if (isUpdating) return;
            try {
                const response = await fetch(`${API_URL}/latest`, { headers: { ...HEADERS, 'X-Bin-Meta': false } });
                if (response.ok) {
                    const latestData = await response.json();
                    if (JSON.stringify(latestData) !== JSON.stringify(appData)) {
                        appData = latestData;
                        renderApp();
                    }
                }
            } catch (error) {
                console.error('Polling error:', error);
            }
        }, POLLING_INTERVAL);
    }

    // --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–ï–ù–î–ï–†–ò–ù–ì–ê ---
    function renderApp() {
        if (!appData) return;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π (–ø–æ—Ü–µ–ª—É–π, –æ–±—ä—è—Ç–∏–µ)
        handleInteractionAnimations();

        // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
        renderHeartsTab();
        renderQuestionTab();
        renderGameTab();
        renderStarMapTab();
        
        // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ–±—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        renderSoundToggle();
    }
    
    // --- –£–°–¢–ê–ù–û–í–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô ---
    function setupEventListeners() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-button').forEach(button => {
            if (button.dataset.tab) {
                button.addEventListener('click', () => switchTab(button.dataset.tab));
            }
        });
        
        // –í–∫–ª–∞–¥–∫–∞ "–°–µ—Ä–¥—Ü–∞"
        document.getElementById('he-heart').addEventListener('click', () => openHeartModal('He'));
        document.getElementById('she-heart').addEventListener('click', () => openHeartModal('She'));
        document.getElementById('kiss-button').addEventListener('click', sendKiss);
        document.getElementById('hug-button').addEventListener('click', sendHug);
        document.getElementById('save-heart-changes').addEventListener('click', saveHeartChanges);

        // –í–∫–ª–∞–¥–∫–∞ "–í–æ–ø—Ä–æ—Å –¥–Ω—è"
        document.getElementById('submit-answer-button').addEventListener('click', submitAnswer);

        // –í–∫–ª–∞–¥–∫–∞ "–ó–≤—ë–∑–¥–Ω–∞—è –∫–∞—Ä—Ç–∞"
        setupCanvas();
        document.getElementById('clear-canvas-button').addEventListener('click', confirmClearCanvas);
        document.getElementById('star-color-picker').addEventListener('change', (e) => {
            // –¶–≤–µ—Ç –º–µ–Ω—è–µ—Ç—Å—è —Å—Ä–∞–∑—É, –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ appData –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
            // –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–∞, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ appData
        });

        // –ó–≤—É–∫
        document.getElementById('sound-toggle').addEventListener('click', toggleSound);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤
        setInterval(changeCompliment, 9000);
    }

    // --- –õ–û–ì–ò–ö–ê –í–ö–õ–ê–î–û–ö ---

    function switchTab(tabId) {
        document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
        document.querySelectorAll('.nav-button[data-tab]').forEach(btn => btn.classList.remove('active'));
        
        document.getElementById(`tab-${tabId}`).classList.add('active');
        document.querySelector(`.nav-button[data-tab="${tabId}"]`).classList.add('active');
    }

    // --- –í–ö–õ–ê–î–ö–ê 1: –°–ï–†–î–¶–ê ---
    
    function renderHeartsTab() {
        const { He, She } = appData;
        // –°–µ—Ä–¥—Ü–µ "–û–Ω"
        const heHeart = document.getElementById('he-heart');
        heHeart.style.backgroundColor = He.heart.color;
        heHeart.textContent = He.heart.emoji;
        heHeart.style.setProperty('--heart-he-color', He.heart.color);
        // –°–µ—Ä–¥—Ü–µ "–û–Ω–∞"
        const sheHeart = document.getElementById('she-heart');
        sheHeart.style.backgroundColor = She.heart.color;
        sheHeart.textContent = She.heart.emoji;
        sheHeart.style.setProperty('--heart-she-color', She.heart.color);
    }
    
    function openHeartModal(user) {
        if (user !== currentUser) return; // –ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ—ë —Å–µ—Ä–¥—Ü–µ
        
        const modal = document.getElementById('heart-modal');
        modal.dataset.user = user;
        
        const colorPalette = modal.querySelector('.color-palette');
        const emojiPalette = modal.querySelector('.emoji-palette');
        
        const colors = ['#ff4d4d', '#ff8fab', '#a481f1', '#4d79ff', '#52d1a6', '#f5d76e', '#ff9a8b'];
        const emojis = ['‚ù§Ô∏è', 'üíñ', '‚ú®', 'üî•', 'ü•∞', 'üåü', 'üí´', 'üíû'];
        
        colorPalette.innerHTML = colors.map(c => `<div class="color-option" style="background-color: ${c}" data-color="${c}"></div>`).join('');
        emojiPalette.innerHTML = emojis.map(e => `<div class="emoji-option" data-emoji="${e}">${e}</div>`).join('');

        // –í—ã–±–æ—Ä —Ç–µ–∫—É—â–∏—Ö
        const currentHeart = appData[user].heart;
        const selectedColor = colorPalette.querySelector(`[data-color="${currentHeart.color}"]`);
        if(selectedColor) selectedColor.classList.add('selected');
        const selectedEmoji = emojiPalette.querySelector(`[data-emoji="${currentHeart.emoji}"]`);
        if(selectedEmoji) selectedEmoji.classList.add('selected');

        colorPalette.querySelectorAll('.color-option').forEach(el => el.addEventListener('click', () => {
            colorPalette.querySelector('.selected')?.classList.remove('selected');
            el.classList.add('selected');
        }));
        emojiPalette.querySelectorAll('.emoji-option').forEach(el => el.addEventListener('click', () => {
            emojiPalette.querySelector('.selected')?.classList.remove('selected');
            el.classList.add('selected');
        }));
        
        modal.classList.remove('hidden');
    }

    function saveHeartChanges() {
        const modal = document.getElementById('heart-modal');
        const user = modal.dataset.user;
        const selectedColor = modal.querySelector('.color-option.selected')?.dataset.color;
        const selectedEmoji = modal.querySelector('.emoji-option.selected')?.dataset.emoji;

        if (selectedColor) appData[user].heart.color = selectedColor;
        if (selectedEmoji) appData[user].heart.emoji = selectedEmoji;
        
        modal.classList.add('hidden');
        renderHeartsTab();
        updateData(appData);
    }

    function sendKiss() {
        appData.interactions.kissFrom = currentUser;
        updateData(appData);
    }

    function sendHug() {
        appData.interactions.hugFrom = currentUser;
        updateData(appData);
    }

    function handleInteractionAnimations() {
        const { kissFrom, hugFrom } = appData.interactions;

        if (kissFrom) {
            const sender = kissFrom;
            const receiver = sender === 'He' ? 'She' : 'He';
            
            const senderHeart = document.getElementById(`${sender.toLowerCase()}-heart-wrapper`);
            const receiverHeart = document.getElementById(`${receiver.toLowerCase()}-heart-wrapper`);
            
            const particle = document.createElement('div');
            particle.textContent = 'üíã';
            particle.className = 'kiss-particle';
            document.querySelector('.hearts-interaction-area').appendChild(particle);

            const startRect = senderHeart.getBoundingClientRect();
            const endRect = receiverHeart.getBoundingClientRect();
            
            particle.style.left = `${startRect.left + startRect.width / 2}px`;
            particle.style.top = `${startRect.top + startRect.height / 2}px`;
            
            const tx = endRect.left - startRect.left;
            const ty = endRect.top - startRect.top;

            particle.style.setProperty('--tx', `${tx}px`);
            particle.style.setProperty('--ty', `${ty}px`);
            
            setTimeout(() => particle.remove(), 1500);

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∞—Å—å
            appData.interactions.kissFrom = null;
            updateData(appData);
        }

        if (hugFrom) {
            const heHeart = document.getElementById('he-heart-wrapper');
            const sheHeart = document.getElementById('she-heart-wrapper');
            
            heHeart.style.setProperty('--hug-translate', '50%');
            sheHeart.style.setProperty('--hug-translate', '-50%');
            
            heHeart.classList.add('hugging');
            sheHeart.classList.add('hugging');
            
            setTimeout(() => {
                heHeart.classList.remove('hugging');
                sheHeart.classList.remove('hugging');
            }, 2000);

            appData.interactions.hugFrom = null;
            updateData(appData);
        }
    }

    function changeCompliment() {
        const compliments = [
            "–¢—ã ‚Äî –º–æ—ë —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Å—á–∞—Å—Ç—å–µ.", "–° —Ç–æ–±–æ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Å–æ–±–µ–Ω–Ω—ã–π.", "–¢–≤–æ—è —É–ª—ã–±–∫–∞ –æ—Å–≤–µ—â–∞–µ—Ç –º–æ–π –º–∏—Ä.",
            "–Ø –ª—é–±–ª—é —Ç–µ–±—è –±–æ–ª—å—à–µ, —á–µ–º —Å–ª–æ–≤–∞ –º–æ–≥—É—Ç –≤—ã—Ä–∞–∑–∏—Ç—å.", "–¢—ã –¥–µ–ª–∞–µ—à—å –º–µ–Ω—è –ª—É—á—à–µ.", "–í–º–µ—Å—Ç–µ –º—ã –º–æ–∂–µ–º –≤—Å—ë.",
            "–¢—ã –º–æ—ë –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ.", "–ö–∞–∂–¥–∞—è –º–∏–Ω—É—Ç–∞ —Å —Ç–æ–±–æ–π ‚Äî —ç—Ç–æ –ø–æ–¥–∞—Ä–æ–∫.", "–ù–∞—à–∞ –ª—é–±–æ–≤—å ‚Äî —ç—Ç–æ –º–∞–≥–∏—è."
        ];
        const complimentText = document.getElementById('compliment-text');
        complimentText.style.opacity = '0';
        setTimeout(() => {
            const randomIndex = Math.floor(Math.random() * compliments.length);
            complimentText.textContent = compliments[randomIndex];
            complimentText.style.opacity = '1';
        }, 1000);
    }

    // --- –í–ö–õ–ê–î–ö–ê 2: –í–û–ü–†–û–° –î–ù–Ø –ò –ò–°–¢–û–†–ò–Ø ---
    function renderQuestionTab() {
        checkForNewDay(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å

        const { dailyQuestion, answerHistory } = appData;
        
        const questionText = document.getElementById('daily-question-text');
        const questions = getDailyQuestions();
        questionText.textContent = questions[dailyQuestion.questionId];

        const userAnswerInput = document.getElementById('user-answer');
        const submitButton = document.getElementById('submit-answer-button');
        const waitingPartner = document.getElementById('waiting-partner');
        const answersDisplay = document.getElementById('answers-display');
        const answerSection = document.getElementById('answer-section');

        const myAnswer = dailyQuestion.answers[currentUser];
        const partnerAnswer = dailyQuestion.answers[currentUser === 'He' ? 'She' : 'He'];

        if (myAnswer) {
            answerSection.classList.add('hidden');
            if (partnerAnswer) {
                // –û–±–∞ –æ—Ç–≤–µ—Ç–∏–ª–∏
                waitingPartner.classList.add('hidden');
                answersDisplay.classList.remove('hidden');
                document.getElementById('he-answer-text').textContent = dailyQuestion.answers.He;
                document.getElementById('she-answer-text').textContent = dailyQuestion.answers.She;
            } else {
                // –¢–æ–ª—å–∫–æ —è –æ—Ç–≤–µ—Ç–∏–ª
                waitingPartner.classList.remove('hidden');
                answersDisplay.classList.add('hidden');
            }
        } else {
            // –Ø –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
            answerSection.classList.remove('hidden');
            userAnswerInput.value = '';
            waitingPartner.classList.add('hidden');
            answersDisplay.classList.add('hidden');
        }

        // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏
        const historyContainer = document.getElementById('answer-history');
        historyContainer.innerHTML = '';
        answerHistory.slice().reverse().forEach(entry => {
            const entryDiv = document.createElement('div');
            entryDiv.className = 'history-entry';
            entryDiv.innerHTML = `
                <div class="date">${entry.date}</div>
                <p class="question">${entry.question}</p>
                <div class="answers">
                    <p><strong>–û–Ω:</strong> ${entry.answers.He}</p>
                    <p><strong>–û–Ω–∞:</strong> ${entry.answers.She}</p>
                </div>
            `;
            historyContainer.appendChild(entryDiv);
        });
    }

    function submitAnswer() {
        const answer = document.getElementById('user-answer').value.trim();
        if (!answer) return;

        appData.dailyQuestion.answers[currentUser] = answer;

        const partner = currentUser === 'He' ? 'She' : 'He';
        if (appData.dailyQuestion.answers[partner]) {
            // –ü–∞—Ä—Ç–Ω–µ—Ä —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            saveToHistory();
        }

        updateData(appData).then(renderQuestionTab);
    }

    function saveToHistory() {
        const { dailyQuestion } = appData;
        const questions = getDailyQuestions();
        appData.answerHistory.push({
            date: dailyQuestion.date,
            question: questions[dailyQuestion.questionId],
            answers: { ...dailyQuestion.answers }
        });
    }
    
    function checkForNewDay() {
        const today = new Date().toISOString().split('T')[0];
        if (appData.dailyQuestion.date !== today) {
            // –ù–æ–≤—ã–π –¥–µ–Ω—å! –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç—ã
            const questions = getDailyQuestions();
            appData.dailyQuestion.date = today;
            appData.dailyQuestion.questionId = new Date().getDate() % questions.length;
            appData.dailyQuestion.answers = { He: null, She: null };
            updateData(appData);
        }
    }

    // --- –í–ö–õ–ê–î–ö–ê 3: –¢–ï–ö–°–¢–û–í–ê–Ø –ò–ì–†–ê ---
    function renderGameTab() {
        const { game } = appData;
        const story = getGameStory();
        const currentNode = story[game.currentNode];

        document.getElementById('sync-scale').textContent = game.syncScale;
        document.getElementById('inventory').textContent = game.inventory.length > 0 ? game.inventory.join(', ') : '–ø—É—Å—Ç–æ';
        document.getElementById('game-story').innerHTML = currentNode.text;

        const choicesContainer = document.getElementById('game-choices');
        const waitingMessage = document.getElementById('game-waiting-message');
        choicesContainer.innerHTML = '';

        const myChoice = game.choices[currentUser];
        const partnerChoice = game.choices[currentUser === 'He' ? 'She' : 'He'];

        if (myChoice) {
            waitingMessage.classList.remove('hidden');
            choicesContainer.classList.add('hidden');
        } else {
            waitingMessage.classList.add('hidden');
            choicesContainer.classList.remove('hidden');
            currentNode.choices.forEach((choice, index) => {
                const button = document.createElement('button');
                button.className = 'choice-button';
                button.textContent = choice.text;
                button.addEventListener('click', () => makeGameChoice(index));
                choicesContainer.appendChild(button);
            });
        }
        
        // –ï—Å–ª–∏ –æ–±–∞ –≤—ã–±—Ä–∞–ª–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (myChoice !== null && partnerChoice !== null) {
            processGameTurn();
        }
    }

    function makeGameChoice(choiceIndex) {
        appData.game.choices[currentUser] = choiceIndex;
        updateData(appData).then(renderGameTab);
    }

    function processGameTurn() {
        const { game } = appData;
        const story = getGameStory();
        const currentNode = story[game.currentNode];
        
        const myChoice = currentNode.choices[game.choices[currentUser]];
        const partnerChoice = currentNode.choices[game.choices[currentUser === 'He' ? 'She' : 'He']];

        // –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        if (myChoice.id === partnerChoice.id) {
            game.syncScale = Math.min(100, game.syncScale + 10);
        } else {
            game.syncScale = Math.max(0, game.syncScale - 5);
        }

        if (myChoice.item) game.inventory.push(myChoice.item);
        if (partnerChoice.item && myChoice.item !== partnerChoice.item) game.inventory.push(partnerChoice.item);
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É (–±–µ—Ä–µ–º –∏–∑ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞)
        game.currentNode = myChoice.next;
        game.choices = { He: null, She: null };
        
        updateData(appData).then(renderGameTab);
    }
    
    // --- –í–ö–õ–ê–î–ö–ê 4: –ó–í–Å–ó–î–ù–ê–Ø –ö–ê–†–¢–ê ---
    let canvas, ctx, drawing = false, lastPos = null;

    function setupCanvas() {
        canvas = document.getElementById('star-canvas');
        ctx = canvas.getContext('2d');
        
        // –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ canvas
        function resizeCanvas() {
            const rect = canvas.getBoundingClientRect();
            canvas.width = rect.width;
            canvas.height = rect.height;
            renderStarMapTab(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        }
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mouseup', stopDrawing);
        canvas.addEventListener('mouseout', stopDrawing);
        canvas.addEventListener('mousemove', draw);

        canvas.addEventListener('touchstart', (e) => { e.preventDefault(); startDrawing(e.touches[0]); });
        canvas.addEventListener('touchend', (e) => { e.preventDefault(); stopDrawing(); });
        canvas.addEventListener('touchmove', (e) => { e.preventDefault(); draw(e.touches[0]); });
    }

    function renderStarMapTab() {
        if (!ctx || !appData) return;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        appData.starMap.paths.forEach(path => {
            ctx.beginPath();
            ctx.strokeStyle = path.color;
            ctx.lineWidth = 2;
            ctx.lineCap = 'round';
            ctx.moveTo(path.points[0].x * canvas.width, path.points[0].y * canvas.height);
            for (let i = 1; i < path.points.length; i++) {
                ctx.lineTo(path.points[i].x * canvas.width, path.points[i].y * canvas.height);
            }
            ctx.stroke();
        });
    }

    function startDrawing(e) {
        drawing = true;
        const pos = getMousePos(e);
        const color = document.getElementById('star-color-picker').value;
        appData.starMap.paths.push({ color: color, points: [pos] });
        lastPos = pos;
    }

    function draw(e) {
        if (!drawing) return;
        const pos = getMousePos(e);
        const currentPath = appData.starMap.paths[appData.starMap.paths.length - 1];
        currentPath.points.push(pos);
        
        // –†–∏—Å—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        ctx.beginPath();
        ctx.strokeStyle = currentPath.color;
        ctx.lineWidth = 2;
        ctx.lineCap = 'round';
        ctx.moveTo(lastPos.x * canvas.width, lastPos.y * canvas.height);
        ctx.lineTo(pos.x * canvas.width, pos.y * canvas.height);
        ctx.stroke();
        lastPos = pos;
    }

    function stopDrawing() {
        if (!drawing) return;
        drawing = false;
        lastPos = null;
        updateData(appData); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    }

    function getMousePos(e) {
        const rect = canvas.getBoundingClientRect();
        return {
            x: (e.clientX - rect.left) / canvas.width,
            y: (e.clientY - rect.top) / canvas.height
        };
    }

    function confirmClearCanvas() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Ö–æ–ª—Å—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.')) {
            appData.starMap.paths = [];
            updateData(appData).then(renderStarMapTab);
        }
    }

    // --- –ó–í–£–ö ---
    const music = document.getElementById('background-music');
    function toggleSound() {
        appData[currentUser].soundOn = !appData[currentUser].soundOn;
        renderSoundToggle();
        updateData(appData);
    }

    function renderSoundToggle() {
        const soundButton = document.getElementById('sound-toggle');
        if (appData[currentUser].soundOn) {
            soundButton.textContent = 'üîä';
            music.play().catch(e => console.log("Autoplay was prevented."));
        } else {
            soundButton.textContent = 'üéµ';
            music.pause();
        }
    }

    // --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –î–ê–ù–ù–´–ï ---
    
    function isDataStructureValid(data) {
        const keys = ['He', 'She', 'interactions', 'dailyQuestion', 'answerHistory', 'game', 'starMap'];
        return data && keys.every(key => key in data);
    }

    function getDefaultDataStructure() {
        const today = new Date().toISOString().split('T')[0];
        const questions = getDailyQuestions();
        return {
            "He": { "heart": { "color": "#4d79ff", "emoji": "üíô" }, "soundOn": false },
            "She": { "heart": { "color": "#ff8fab", "emoji": "üíñ" }, "soundOn": false },
            "interactions": { "kissFrom": null, "hugFrom": null },
            "dailyQuestion": {
                "date": today,
                "questionId": new Date().getDate() % questions.length,
                "answers": { "He": null, "She": null }
            },
            "answerHistory": [],
            "game": {
                "currentNode": "start",
                "inventory": [],
                "syncScale": 50,
                "choices": { "He": null, "She": null }
            },
            "starMap": { "paths": [] }
        };
    }
    
    function getDailyQuestions() {
        return [
            "–ß—Ç–æ –∑–∞—Å—Ç–∞–≤–∏–ª–æ —Ç–µ–±—è —É–ª—ã–±–Ω—É—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è?",
            "–ö–∞–∫–æ–µ —Ç–≤–æ–µ —Å–∞–º–æ–µ —Ç–µ–ø–ª–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–∞—Å?",
            "–ï—Å–ª–∏ –±—ã –º—ã –º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –∫—É–¥–∞ —É–≥–æ–¥–Ω–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –∫—É–¥–∞ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª(–∞)?",
            "–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª —Ç—ã –±—ã —Ö–æ—Ç–µ–ª(–∞) –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ –º–Ω–æ–π?",
            "–û–ø–∏—à–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—á–µ—Ä –¥–ª—è –Ω–∞—Å –¥–≤–æ–∏—Ö.",
            "–ö–∞–∫–∞—è –ø–µ—Å–Ω—è –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ç–µ–±–µ –æ–±–æ –º–Ω–µ?",
            "–ß—Ç–æ —Ç—ã —Ü–µ–Ω–∏—à—å –≤–æ –º–Ω–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
            "–ö–∞–∫–∞—è —É —Ç–µ–±—è –µ—Å—Ç—å –º–∞–ª–µ–Ω—å–∫–∞—è –º–µ—á—Ç–∞, –æ –∫–æ—Ç–æ—Ä–æ–π —è –Ω–µ –∑–Ω–∞—é?",
            "–ß—Ç–æ —Å–∞–º–æ–µ —Å–º–µ—à–Ω–æ–µ, —á—Ç–æ –º—ã –¥–µ–ª–∞–ª–∏ –≤–º–µ—Å—Ç–µ?",
            "–ö–∞–∫–æ–π —Å—É–ø–µ—Ä—Å–∏–ª–æ–π —Ç—ã –±—ã —Ö–æ—Ç–µ–ª(–∞) –æ–±–ª–∞–¥–∞—Ç—å –∏ –ø–æ—á–µ–º—É?"
        ];
    }

    function getGameStory() {
        return {
            "start": {
                "text": "–í—ã —Å—Ç–æ–∏—Ç–µ –ø–µ—Ä–µ–¥ –¥—Ä–µ–≤–Ω–∏–º, –∑–∞—Ä–æ—Å—à–∏–º –ª–∏–∞–Ω–∞–º–∏ —Ö—Ä–∞–º–æ–º. –¢—è–∂–µ–ª–∞—è –∫–∞–º–µ–Ω–Ω–∞—è –¥–≤–µ—Ä—å –ø—Ä–µ–≥—Ä–∞–∂–¥–∞–µ—Ç –ø—É—Ç—å. –°–ª–µ–≤–∞ –æ—Ç –¥–≤–µ—Ä–∏ ‚Äî —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ —Å—Ç–µ–Ω–µ, —Å–ø—Ä–∞–≤–∞ ‚Äî –Ω–µ–±–æ–ª—å—à–æ–π —Ä—ã—á–∞–≥, –ø–æ–∫—Ä—ã—Ç—ã–π —Ä–∂–∞–≤—á–∏–Ω–æ–π. –ß—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ?",
                "choices": [
                    { "text": "–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã", "id": "decode", "next": "decode_result" },
                    { "text": "–î–µ—Ä–Ω—É—Ç—å –∑–∞ —Ä–∂–∞–≤—ã–π —Ä—ã—á–∞–≥", "id": "pull", "next": "pull_result" }
                ]
            },
            "decode_result": {
                "text": "–í—ã –≤–º–µ—Å—Ç–µ —Ä–∞–∑–≥–ª—è–¥—ã–≤–∞–µ—Ç–µ —Å–∏–º–≤–æ–ª—ã. –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –¥—Ä–µ–≤–Ω—è—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞. –ü–æ—Å–ª–µ –¥–æ–ª–≥–∏—Ö —Ä–∞–∑–¥—É–º–∏–π –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –∫–æ–¥. –î–≤–µ—Ä—å —Å–æ —Å–∫—Ä–∏–ø–æ–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è! –í–∞—à–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç.",
                "choices": [
                    { "text": "–í–æ–π—Ç–∏ –≤ —Ç–µ–º–Ω—ã–π –ø—Ä–æ—Ö–æ–¥", "id": "enter", "next": "hall" }
                ]
            },
            "pull_result": {
                "text": "–í—ã —Å —Å–∏–ª–æ–π –¥–µ—Ä–≥–∞–µ—Ç–µ –∑–∞ —Ä—ã—á–∞–≥. –†–∞–∑–¥–∞–µ—Ç—Å—è —Å–∫—Ä–µ–∂–µ—Ç, –∏ –∏–∑-–ø–æ–¥ –∑–µ–º–ª–∏ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è —Ä–µ—à–µ—Ç–∫–∞, –±–ª–æ–∫–∏—Ä—É—è –ø—É—Ç—å –Ω–∞–∑–∞–¥. –ù–æ –¥–≤–µ—Ä—å –≤ —Ö—Ä–∞–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è. –ù–µ–º–Ω–æ–≥–æ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ!",
                "choices": [
                    { "text": "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤–Ω—É—Ç—Ä—å", "id": "enter", "next": "hall" }
                ]
            },
            "hall": {
                "text": "–í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ –±–æ–ª—å—à–æ–π –∑–∞–ª. –í —Ü–µ–Ω—Ç—Ä–µ —Å—Ç–æ–∏—Ç –ø—å–µ–¥–µ—Å—Ç–∞–ª, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ª–µ–∂–∏—Ç —Å–≤–µ—Ç—è—â–∏–π—Å—è –∫—Ä–∏—Å—Ç–∞–ª–ª. –í –¥–∞–ª—å–Ω–µ–º –∫–æ–Ω—Ü–µ –∑–∞–ª–∞ ‚Äî –¥–≤–µ –¥–≤–µ—Ä–∏: –æ–¥–Ω–∞ —É–∫—Ä–∞—à–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–æ–ª–Ω—Ü–∞, –¥—Ä—É–≥–∞—è ‚Äî –ª—É–Ω—ã. –ö—É–¥–∞ –ø–æ–π–¥–µ—Ç–µ?",
                "choices": [
                    { "text": "–ö –¥–≤–µ—Ä–∏ –°–æ–ª–Ω—Ü–∞", "id": "sun", "next": "sun_room" },
                    { "text": "–ö –¥–≤–µ—Ä–∏ –õ—É–Ω—ã", "id": "moon", "next": "moon_room" },
                    { "text": "–í–∑—è—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª —Å –ø—å–µ–¥–µ—Å—Ç–∞–ª–∞", "id": "crystal", "item": "–°–≤–µ—Ç—è—â–∏–π—Å—è –∫—Ä–∏—Å—Ç–∞–ª–ª", "next": "hall_with_crystal" }
                ]
            },
            "hall_with_crystal": {
                "text": "–í—ã –≤–∑—è–ª–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª. –û–Ω —Ç–µ–ø–ª–æ –ø—É–ª—å—Å–∏—Ä—É–µ—Ç –≤ —Ä—É–∫–∞—Ö. –î–≤–µ—Ä–∏ –°–æ–ª–Ω—Ü–∞ –∏ –õ—É–Ω—ã –≤—Å–µ –µ—â–µ –∂–¥—É—Ç –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞.",
                "choices": [
                    { "text": "–ö –¥–≤–µ—Ä–∏ –°–æ–ª–Ω—Ü–∞", "id": "sun", "next": "sun_room" },
                    { "text": "–ö –¥–≤–µ—Ä–∏ –õ—É–Ω—ã", "id": "moon", "next": "moon_room" }
                ]
            },
            "sun_room": {
                "text": "–≠—Ç–æ –∫–æ–º–Ω–∞—Ç–∞-–ª–æ–≤—É—à–∫–∞! –°—Ç–µ–Ω—ã –Ω–∞—á–∏–Ω–∞—é—Ç —Å–¥–≤–∏–≥–∞—Ç—å—Å—è. –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã.",
                "choices": [
                    { "text": "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "id": "restart", "next": "start" }
                ]
            },
            "moon_room": {
                "text": "–ó–∞ –¥–≤–µ—Ä—å—é –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—É, –ø–æ–ª–Ω—É—é –¥—Ä–µ–≤–Ω–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤. –í—ã –≤–º–µ—Å—Ç–µ –ø—Ä–æ—à–ª–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ! –ü–æ–±–µ–¥–∞!",
                "choices": [
                    { "text": "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "id": "restart", "next": "start" }
                ]
            }
        };
    }

    // --- –ó–ê–ü–£–°–ö ---
    init();
});
