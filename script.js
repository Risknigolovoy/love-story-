document.addEventListener('DOMContentLoaded', () => {
    // --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ö–û–ù–°–¢–ê–ù–¢–´ ---
    const X_MASTER_KEY = '$2a$10$EIdkYYUdFQ6kRpT0OobuU.YjsENOEz9Un3ljT398QIIR0nRqXmFEq';
    const JSONBIN_URL = 'https://api.jsonbin.io/v3/b';
    const POLLING_INTERVAL = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã
    const COMPLIMENT_INTERVAL = 9000; // 9 —Å–µ–∫—É–Ω–¥

    // --- DOM –≠–õ–ï–ú–ï–ù–¢–´ ---
    const loader = document.getElementById('loader');
    const app = document.getElementById('app');
    const roomScreen = document.getElementById('room-screen');
    const mainContent = document.getElementById('main-content');
    const createRoomBtn = document.getElementById('create-room-btn');
    const roomIdInput = document.getElementById('room-id-input');
    const joinAsHeBtn = document.getElementById('join-as-he-btn');
    const joinAsSheBtn = document.getElementById('join-as-she-btn');
    const roomCodeDisplay = document.querySelector('.room-code-display');
    const roomCodeEl = document.getElementById('room-code');

    const heHeart = document.getElementById('he-heart');
    const sheHeart = document.getElementById('she-heart');
    const heEmoji = document.getElementById('he-emoji');
    const sheEmoji = document.getElementById('she-emoji');

    const controls = document.getElementById('controls');
    const colorPalette = document.getElementById('color-palette');
    const emojiPalette = document.getElementById('emoji-palette');
    const confirmChoiceBtn = document.getElementById('confirm-choice-btn');

    const complimentText = document.getElementById('compliment-text');
    const tabs = document.querySelectorAll('.tab-link');
    const tabContents = document.querySelectorAll('.tab-content');

    const gameStory = document.getElementById('game-story');
    const gameChoices = document.getElementById('game-choices');
    const gameStatus = document.getElementById('game-status');

    // --- –°–û–°–¢–û–Ø–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
    let state = {
        binId: null,
        userRole: null, // 'he' –∏–ª–∏ 'she'
        pollingTimer: null,
        complimentTimer: null,
        localData: null,
    };

    // --- –°–ü–ò–°–ö–ò –î–ê–ù–ù–´–• ---
    const compliments = [
        "–Ø –ª—é–±–ª—é —Ç–µ–±—è –¥–æ –ª—É–Ω—ã –∏ –æ–±—Ä–∞—Ç–Ω–æ.", "–°–∫—É—á–∞—é –ø–æ —Ç–≤–æ–µ–º—É –≥–æ–ª–æ—Å—É.", "–¢—ã - –º–æ—ë —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.",
        "–ö–∞–∂–¥–∞—è —Å–µ–∫—É–Ω–¥–∞ –±–µ–∑ —Ç–µ–±—è - –≤–µ—á–Ω–æ—Å—Ç—å.", "–ú—ã —Å–ø—Ä–∞–≤–∏–º—Å—è —Å –ª—é–±—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º.", "–î—É–º–∞—é –æ —Ç–µ–±–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
        "–¢—ã –¥–µ–ª–∞–µ—à—å –º–æ–π –º–∏—Ä —è—Ä—á–µ.", "–°–∫–æ—Ä–µ–π –±—ã —Ç–µ–±—è –æ–±–Ω—è—Ç—å.", "–¢—ã –º–æ—ë —Å–æ–ª–Ω—ã—à–∫–æ –≤ –ø–∞—Å–º—É—Ä–Ω—ã–π –¥–µ–Ω—å.",
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã –µ—Å—Ç—å —É –º–µ–Ω—è.", "–¢—ã ‚Äî –ø—Ä–∏—á–∏–Ω–∞ –º–æ–µ–π —É–ª—ã–±–∫–∏.", "–ù–∞—à–∏ —Å–µ—Ä–¥—Ü–∞ –±—å—é—Ç—Å—è –≤ —É–Ω–∏—Å–æ–Ω."
    ];
    const colors = ['#ff4757', '#ff6b81', '#ffa502', '#ff6348', '#1e90ff', '#4169e1', '#32ff7e', '#7bed9f', '#9b59b6', '#8e44ad'];
    const emojis = ['‚ù§Ô∏è', 'üíñ', 'ü•∞', 'üòç', 'üòò', 'ü§ó', 'üåü', '‚ú®', 'üî•', 'üîê'];

    // --- –ò–ì–†–û–í–´–ï –î–ê–ù–ù–´–ï (–°—é–∂–µ—Ç) ---
    const gameData = {
        'start': {
            text: "–í—ã —Å—Ç–æ–∏—Ç–µ –Ω–∞ –ø–æ—Ä–æ–≥–µ –ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –õ–µ—Å–∞. –õ—É–Ω–Ω—ã–π —Å–≤–µ—Ç –ø—Ä–æ–±–∏–≤–∞–µ—Ç—Å—è —Å–∫–≤–æ–∑—å –∫—Ä–æ–Ω—ã –¥–µ—Ä–µ–≤—å–µ–≤, –æ—Å–≤–µ—â–∞—è –¥–≤–µ —Ç—Ä–æ–ø—ã. –û–¥–Ω–∞ —É—Ö–æ–¥–∏—Ç –≤ —Ç—ë–º–Ω—É—é —á–∞—â—É, –¥—Ä—É–≥–∞—è ‚Äî –∫ –º–µ—Ä—Ü–∞—é—â–µ–º—É –æ–∑–µ—Ä—É. –ö—É–¥–∞ –≤—ã –ø–æ–π–¥—ë—Ç–µ?",
            choices: [{ text: '–í —Ç—ë–º–Ω—É—é —á–∞—â—É', id: 'a' }, { text: '–ö –º–µ—Ä—Ü–∞—é—â–µ–º—É –æ–∑–µ—Ä—É', id: 'b' }],
            outcomes: {
                'a_a': 'deep_forest', 'b_b': 'lake_shore', 'a_b': 'mixed_path_1', 'b_a': 'mixed_path_1'
            }
        },
        'deep_forest': {
            text: "–í—ã –≤–º–µ—Å—Ç–µ —à–∞–≥–Ω—É–ª–∏ –≤ —á–∞—â—É. –í–ø–µ—Ä–µ–¥–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–≤–µ—Ç–ª—è—á–∫–æ–≤, —Ç–∞–Ω—Ü—É—é—â–∏—Ö –≤–æ–∫—Ä—É–≥ –¥—Ä–µ–≤–Ω–µ–≥–æ –¥—É–±–∞, –∏ —Å–ª—ã—à–∏—Ç–µ —Ç–∏—Ö—É—é –º–µ–ª–æ–¥–∏—é. –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?",
            choices: [{ text: '–ü–æ–π—Ç–∏ –∫ –¥—É–±—É', id: 'a' }, { text: '–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –º–µ–ª–æ–¥–∏–∏', id: 'b' }],
            outcomes: {
                'a_a': 'oak_success', 'b_b': 'music_success', 'a_b': 'oak_fail', 'b_a': 'oak_fail'
            }
        },
        'lake_shore': {
            text: "–ë–µ—Ä–µ–≥ –æ–∑–µ—Ä–∞ —É—Å—ã–ø–∞–Ω —Å–≤–µ—Ç—è—â–∏–º–∏—Å—è –∫–∞–º–Ω—è–º–∏. –õ–æ–¥–∫–∞ –º—è–≥–∫–æ –∫–∞—á–∞–µ—Ç—Å—è —É –∫—Ä–æ–º–∫–∏ –≤–æ–¥—ã. –í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ª–æ–¥–∫—É –∏–ª–∏ –ø–æ–π—Ç–∏ –≤–¥–æ–ª—å –±–µ—Ä–µ–≥–∞.",
            choices: [{ text: '–í–∑—è—Ç—å –ª–æ–¥–∫—É –∏ –ø–ª—ã—Ç—å –∫ —Ü–µ–Ω—Ç—Ä—É –æ–∑–µ—Ä–∞', id: 'a' }, { text: '–ò–¥—Ç–∏ –≤–¥–æ–ª—å –±–µ—Ä–µ–≥–∞', id: 'b' }],
            outcomes: {
                'a_a': 'boat_success', 'b_b': 'shore_walk_success', 'a_b': 'boat_fail', 'b_a': 'boat_fail'
            }
        },
        'mixed_path_1': {
            text: "–í–∞—à–∏ –ø—É—Ç–∏ —Ä–∞–∑–æ—à–ª–∏—Å—å, –Ω–æ –≤—Å–∫–æ—Ä–µ —Å–Ω–æ–≤–∞ —Å–æ—à–ª–∏—Å—å —É —Å—Ç–∞—Ä–æ–≥–æ –∫–∞–º–µ–Ω–Ω–æ–≥–æ –º–æ—Å—Ç–∞. –ú–æ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ö—Ä—É–ø–∫–∏–º. –í—ã —Ä–µ—à–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –µ–≥–æ –≤–º–µ—Å—Ç–µ –∏–ª–∏ –±—É–¥–µ—Ç–µ –∏—Å–∫–∞—Ç—å –æ–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å?",
            choices: [{ text: '–†–∏—Å–∫–Ω—É—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –º–æ—Å—Ç', id: 'a' }, { text: '–ò—Å–∫–∞—Ç—å –æ–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å', id: 'b' }],
            outcomes: {
                'a_a': 'bridge_success', 'b_b': 'detour_success', 'a_b': 'bridge_fail', 'b_a': 'bridge_fail'
            }
        },
        // –ö–æ–Ω—Ü–æ–≤–∫–∏
        'oak_success': { text: "–ü–æ–¥–æ–π–¥—è –∫ –¥—É–±—É, –≤—ã –≤–∏–¥–∏—Ç–µ, —á—Ç–æ —Å–≤–µ—Ç–ª—è—á–∫–∏ –æ–±—Ä–∞–∑–æ–≤–∞–ª–∏ –¥–≤–∞ —Å–µ—Ä–¥—Ü–∞. –û–Ω–∏ —Å–ª–∏–≤–∞—é—Ç—Å—è –≤ –æ–¥–Ω–æ, –æ–∑–∞—Ä—è—è –≤–∞—Å —Ç—ë–ø–ª—ã–º —Å–≤–µ—Ç–æ–º. –í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, –∫–∞–∫ –≤–∞—à–∞ —Å–≤—è–∑—å —Å—Ç–∞–ª–∞ –µ—â—ë –∫—Ä–µ–ø—á–µ. (–•–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞)", choices: [], outcomes: {} },
        'music_success': { text: "–ú–µ–ª–æ–¥–∏—è –ø—Ä–∏–≤–µ–ª–∞ –≤–∞—Å –Ω–∞ –ø–æ–ª—è–Ω—É, –≥–¥–µ –¥—É—Ö–∏ –ª–µ—Å–∞ –∏–≥—Ä–∞—é—Ç –Ω–∞ –Ω–µ–≤–∏–¥–∏–º—ã—Ö –∞—Ä—Ñ–∞—Ö. –û–Ω–∏ –¥–∞—Ä—è—Ç –≤–∞–º –≤–æ–ª—à–µ–±–Ω—ã–π —Ü–≤–µ—Ç–æ–∫, —Å–∏–º–≤–æ–ª –≤–µ—á–Ω–æ–π –ª—é–±–≤–∏. (–•–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞)", choices: [], outcomes: {} },
        'oak_fail': { text: "–í–∞—à–∏ —Ä–∞–∑–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–ª–∏ –¥–∏—Å—Å–æ–Ω–∞–Ω—Å. –°–≤–µ—Ç–ª—è—á–∫–∏ —Ä–∞–∑–ª–µ—Ç–µ–ª–∏—Å—å, –∏ –≤ –ª–µ—Å—É —Å—Ç–∞–ª–æ —Ç–µ–º–Ω–æ –∏ —Ö–æ–ª–æ–¥–Ω–æ. –í—ã –∑–∞–±–ª—É–¥–∏–ª–∏—Å—å, –Ω–æ –≤—ã –≤—Å—ë –µ—â—ë –≤–º–µ—Å—Ç–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤—ã—Ö–æ–¥. (–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞)", choices: [], outcomes: {} },
        'boat_success': { text: "–í —Ü–µ–Ω—Ç—Ä–µ –æ–∑–µ—Ä–∞ –≤—ã –≤–∏–¥–∏—Ç–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –¥–≤—É—Ö –ª–µ—Ç—è—â–∏—Ö –∫–æ–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –æ–¥–Ω–æ–π —Ç–æ—á–∫–µ ‚Äî –ø—Ä—è–º–æ –∫–∞–∫ –≤—ã. –≠—Ç–æ –∑–Ω–∞–∫ —Å—É–¥—å–±—ã. (–•–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞)", choices: [], outcomes: {} },
        'shore_walk_success': { text: "–ò–¥—è –≤–¥–æ–ª—å –±–µ—Ä–µ–≥–∞, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ –ø–µ—â–µ—Ä—É, —Å—Ç–µ–Ω—ã –∫–æ—Ç–æ—Ä–æ–π —É—Å—ã–ø–∞–Ω—ã –∫—Ä–∏—Å—Ç–∞–ª–ª–∞–º–∏, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–º–∏ –≤–∞—à–µ —Å—á–∞—Å—Ç–ª–∏–≤–æ–µ –±—É–¥—É—â–µ–µ. (–•–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞)", choices: [], outcomes: {} },
        'boat_fail': { text: "–ò–∑-–∑–∞ –Ω–µ—Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã —É–ø—É—Å—Ç–∏–ª–∏ –ª–æ–¥–∫—É, –∫–æ—Ç–æ—Ä—É—é —É–Ω–µ—Å–ª–æ —Ç–µ—á–µ–Ω–∏–µ–º. –ü—Ä–∏–¥—ë—Ç—Å—è –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—É—Ç—å, –Ω–æ –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ –≤—ã –≤–º–µ—Å—Ç–µ. (–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞)", choices: [], outcomes: {} },
        'bridge_success': { text: "–î–µ—Ä–∂–∞—Å—å –∑–∞ —Ä—É–∫–∏, –≤—ã –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –º–æ—Å—Ç. –í–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É —Å–¥–µ–ª–∞–ª–æ –µ–≥–æ –ø—Ä–æ—á–Ω—ã–º. –ù–∞ –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –≤–∞—Å –∂–¥—ë—Ç —Ü–≤–µ—Ç—É—â–∏–π —Å–∞–¥. (–•–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞)", choices: [], outcomes: {} },
        'detour_success': { text: "–û–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å –æ–∫–∞–∑–∞–ª—Å—è –¥–ª–∏–Ω–Ω—ã–º, –Ω–æ –∂–∏–≤–æ–ø–∏—Å–Ω—ã–º. –í—ã –ø—Ä–æ–≤–µ–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è, —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—è –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—è—Å—å –∫–æ–º–ø–∞–Ω–∏–µ–π –¥—Ä—É–≥ –¥—Ä—É–≥–∞, —á—Ç–æ —Å–±–ª–∏–∑–∏–ª–æ –≤–∞—Å –µ—â—ë –±–æ–ª—å—à–µ. (–•–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞)", choices: [], outcomes: {} },
        'bridge_fail': { text: "–í–∞—à–∏ —Å–æ–º–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∞–ª–∏ –º–æ—Å—Ç –µ—â—ë –±–æ–ª–µ–µ —Ö—Ä—É–ø–∫–∏–º. –û–Ω –æ–±—Ä—É—à–∏–ª—Å—è, –∏ –≤–∞–º –ø—Ä–∏—à–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è. –≠—Ç–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ, –Ω–æ –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ –µ–≥–æ –≤–º–µ—Å—Ç–µ. (–ü–ª–æ—Ö–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞)", choices: [], outcomes: {} },

    };

    // --- –§–£–ù–ö–¶–ò–ò API (JSONBIN.IO) ---
    async function apiCall(url, method = 'GET', body = null) {
        const headers = {
            'Content-Type': 'application/json',
            'X-Master-Key': X_MASTER_KEY,
            'X-Access-Key': '$2a$10$EIdkYYUdFQ6kRpT0OobuU.YjsENOEz9Un3ljT398QIIR0nRqXmFEq' // –î–ª—è –Ω–æ–≤—ã—Ö –±–∏–Ω–æ–≤ –∏–Ω–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        };
        try {
            const options = { method, headers };
            if (body) {
                options.body = JSON.stringify(body);
            }
            const response = await fetch(url, options);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            // –î–ª—è PUT –∑–∞–ø—Ä–æ—Å–æ–≤ jsonbin –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 OK —Å –¥–∞–Ω–Ω—ã–º–∏, –¥–ª—è POST - 200 OK —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
             if (method === 'GET' || method === 'PUT') {
                 return await response.json();
             }
             // –î–ª—è POST –Ω–∞–º –Ω—É–∂–µ–Ω ID –∏–∑ –æ—Ç–≤–µ—Ç–∞
             const data = await response.json();
             return method === 'POST' ? data.metadata.id : data;

        } catch (error) {
            console.error("API call failed:", error);
            alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            return null;
        }
    }

    async function createBin() {
        const initialData = {
            hearts: {
                he: { color: '#4169e1', emoji: '‚ù§Ô∏è' },
                she: { color: '#ff69b4', emoji: '‚ù§Ô∏è' }
            },
            game: {
                node: 'start',
                choices: { he: null, she: null }
            }
        };
        const result = await apiCall(JSONBIN_URL, 'POST', initialData);
        return result; // –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å ID –±–∏–Ω–∞
    }

    async function readBin(binId) {
        const data = await apiCall(`${JSONBIN_URL}/${binId}/latest`);
        return data ? data.record : null;
    }

    async function updateBin(binId, data) {
        return await apiCall(`${JSONBIN_URL}/${binId}`, 'PUT', data);
    }

    // --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ---

    function init() {
        // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
            loader.classList.add('fade-out');
            app.classList.remove('hidden');
            setTimeout(() => loader.classList.add('hidden'), 1000);
        }, 5000); // 5 —Å–µ–∫—É–Ω–¥

        setupEventListeners();
        populatePalettes();
    }
    
    function setupEventListeners() {
        createRoomBtn.addEventListener('click', handleCreateRoom);
        joinAsHeBtn.addEventListener('click', () => handleJoinRoom('he'));
        joinAsSheBtn.addEventListener('click', () => handleJoinRoom('she'));
        
        heHeart.addEventListener('click', () => openControls('he'));
        sheHeart.addEventListener('click', () => openControls('she'));
        confirmChoiceBtn.addEventListener('click', handleConfirmChoice);
        
        tabs.forEach(tab => {
            tab.addEventListener('click', () => switchTab(tab.dataset.tab));
        });
        
        roomCodeEl.addEventListener('click', () => navigator.clipboard.writeText(state.binId));
    }

    // –õ–æ–≥–∏–∫–∞ –∫–æ–º–Ω–∞—Ç
    async function handleCreateRoom() {
        createRoomBtn.disabled = true;
        createRoomBtn.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ...';
        const binId = await createBin();
        if (binId) {
            state.binId = binId;
            roomCodeEl.textContent = state.binId;
            roomCodeDisplay.classList.remove('hidden');
            alert(`–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –í–∞—à –∫–æ–¥: ${state.binId}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä—É. –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–π–¥—ë—Ç–µ –∫–∞–∫ "–û–Ω".`);
            await startSession(binId, 'he');
        } else {
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É.");
        }
        createRoomBtn.disabled = false;
        createRoomBtn.textContent = '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É';
    }

    async function handleJoinRoom(role) {
        const binId = roomIdInput.value.trim();
        if (!binId) {
            alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã.");
            return;
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∏–Ω–∞
        const data = await readBin(binId);
        if (data) {
            await startSession(binId, role);
        } else {
            alert("–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        }
    }

    async function startSession(binId, role) {
        state.binId = binId;
        state.userRole = role;
        
        roomScreen.classList.add('hidden');
        mainContent.classList.remove('hidden');

        await pollServer(); // –ü–µ—Ä–≤—ã–π –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        state.pollingTimer = setInterval(pollServer, POLLING_INTERVAL);
        startComplimentCycle();
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    function updateUI(data) {
        if (!data) return;
        state.localData = data; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–¥—Ü–∞
        heHeart.style.color = data.hearts.he.color;
        heEmoji.textContent = data.hearts.he.emoji;
        sheHeart.style.color = data.hearts.she.color;
        sheEmoji.textContent = data.hearts.she.emoji;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
        updateGameUI(data.game);
    }
    
    function updateGameUI(game) {
        const currentNode = gameData[game.node];
        if (!currentNode) return;
        
        gameStory.textContent = currentNode.text;
        
        // –û—á–∏—â–∞–µ–º –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
        gameChoices.innerHTML = '';
        if (currentNode.choices.length > 0) {
            currentNode.choices.forEach(choice => {
                const button = document.createElement('button');
                button.textContent = choice.text;
                button.dataset.choice = choice.id;
                button.addEventListener('click', () => handleGameChoice(choice.id));
                gameChoices.appendChild(button);
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
        const myChoice = game.choices[state.userRole];
        const partnerRole = state.userRole === 'he' ? 'she' : 'he';
        const partnerChoice = game.choices[partnerRole];

        if (myChoice) {
            // –ï—Å–ª–∏ —è —É–∂–µ –≤—ã–±—Ä–∞–ª
            gameChoices.querySelectorAll('button').forEach(b => {
                b.disabled = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
                if (b.dataset.choice === myChoice) b.classList.add('chosen');
            });
            gameStatus.textContent = partnerChoice ? '–û–±–∞ —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä! –°–º–æ—Ç—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...' : '–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞...';
        } else {
             // –ï—Å–ª–∏ —è –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª
            gameStatus.textContent = partnerChoice ? `–í–∞—à –ø–∞—Ä—Ç–Ω—ë—Ä (${partnerRole}) —É–∂–µ —Å–¥–µ–ª–∞–ª —Å–≤–æ–π –≤—ã–±–æ—Ä. –¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!` : '–°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä...';
        }
    }


    // –õ–æ–≥–∏–∫–∞ —Å–µ—Ä–¥–µ—Ü
    function openControls(role) {
        if (role !== state.userRole) {
            alert("–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ—ë —Å–µ—Ä–¥—Ü–µ :)");
            return;
        }
        controls.classList.remove('hidden');
        controls.dataset.editing = role; // –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—å–µ —Å–µ—Ä–¥—Ü–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    }

    async function handleConfirmChoice() {
        const role = controls.dataset.editing;
        const selectedColor = colorPalette.querySelector('.swatch-selected');
        const selectedEmoji = emojiPalette.querySelector('.swatch-selected');

        if (!selectedColor || !selectedEmoji) {
            alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏ —Ü–≤–µ—Ç, –∏ —ç–º–æ–¥–∑–∏.");
            return;
        }

        const newData = JSON.parse(JSON.stringify(state.localData)); // –ì–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è
        newData.hearts[role].color = selectedColor.dataset.color;
        newData.hearts[role].emoji = selectedEmoji.dataset.emoji;

        controls.classList.add('hidden');
        updateUI(newData); // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await updateBin(state.binId, newData);
    }
    
    function populatePalettes() {
        colors.forEach(color => {
            const swatch = document.createElement('div');
            swatch.className = 'color-swatch';
            swatch.style.backgroundColor = color;
            swatch.dataset.color = color;
            swatch.addEventListener('click', () => selectSwatch(swatch, 'color'));
            colorPalette.appendChild(swatch);
        });
        emojis.forEach(emoji => {
            const swatch = document.createElement('div');
            swatch.className = 'emoji-swatch';
            swatch.textContent = emoji;
            swatch.dataset.emoji = emoji;
            swatch.addEventListener('click', () => selectSwatch(swatch, 'emoji'));
            emojiPalette.appendChild(swatch);
        });
    }
    
    function selectSwatch(swatch, type) {
        const palette = type === 'color' ? colorPalette : emojiPalette;
        palette.querySelectorAll('.swatch-selected').forEach(s => s.classList.remove('swatch-selected'));
        swatch.classList.add('swatch-selected');
    }

    // –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã
    async function handleGameChoice(choiceId) {
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const newData = JSON.parse(JSON.stringify(state.localData));
        newData.game.choices[state.userRole] = choiceId;
        
        updateGameUI(newData.game); // –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—à –≤—ã–±–æ—Ä –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const serverData = await updateBin(state.binId, newData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–¥–µ–ª–∞–ª –ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä –≤—ã–±–æ—Ä –ü–û–°–õ–ï –Ω–∞—à–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if(serverData) {
            const partnerRole = state.userRole === 'he' ? 'she' : 'he';
            if (serverData.record.game.choices[partnerRole]) {
                 // –ï—Å–ª–∏ –¥–∞, –∑–Ω–∞—á–∏—Ç, –º—ã –±—ã–ª–∏ –≤—Ç–æ—Ä—ã–º–∏. –ú—ã –æ—Ç–≤–µ—á–∞–µ–º –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª.
                 await advanceGame(serverData.record);
            }
        }
    }
    
    async function advanceGame(data) {
        const choices = data.game.choices;
        const currentNode = gameData[data.game.node];
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'a_b'
        const outcomeKey = `${choices.he}_${choices.she}`;
        const nextNodeId = currentNode.outcomes[outcomeKey];
        
        if (nextNodeId) {
            // –ì–æ—Ç–æ–≤–∏–º –Ω–æ–≤—ã–π —Å—Ç–µ–π—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
            const nextStateData = {
                ...data,
                game: {
                    node: nextNodeId,
                    choices: { he: null, she: null } // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä—ã
                }
            };
             // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–µ–π—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –í—Å–µ —É–≤–∏–¥—è—Ç –µ–≥–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ–ª–ª–∏–Ω–≥–µ.
            await updateBin(state.binId, nextStateData);
        }
    }


    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function switchTab(tabId) {
        tabs.forEach(tab => tab.classList.remove('active'));
        tabContents.forEach(content => content.classList.remove('active'));
        document.querySelector(`[data-tab="${tabId}"]`).classList.add('active');
        document.getElementById(`${tabId}-tab`).classList.add('active');
    }

    function startComplimentCycle() {
        complimentText.textContent = compliments[Math.floor(Math.random() * compliments.length)];
        state.complimentTimer = setInterval(() => {
            complimentText.classList.add('fade-out');
            setTimeout(() => {
                let newCompliment = compliments[Math.floor(Math.random() * compliments.length)];
                while (newCompliment === complimentText.textContent) {
                     newCompliment = compliments[Math.floor(Math.random() * compliments.length)];
                }
                complimentText.textContent = newCompliment;
                complimentText.classList.remove('fade-out');
            }, 1000);
        }, COMPLIMENT_INTERVAL);
    }

    async function pollServer() {
        if (!state.binId) return;
        const data = await readBin(state.binId);
        if (data) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å UI (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–µ–π)
            if (JSON.stringify(data) !== JSON.stringify(state.localData)) {
                updateUI(data);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–º, –∫–∞–∫ –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥
                const { he, she } = data.game.choices;
                if (he && she) {
                    await advanceGame(data);
                }
            }
        }
    }

    // --- –ó–ê–ü–£–°–ö ---
    init();
});
