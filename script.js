document.addEventListener('DOMContentLoaded', () => {
    // --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
    const X_MASTER_KEY = '$2a$10$EIdkYYUdFQ6kRpT0OobuU.YjsENOEz9Un3ljT398QIIR0nRqXmFEq';
    const JSONBIN_URL = 'https://api.jsonbin.io/v3/b';
    const POLLING_INTERVAL = 3500;
    const COMPLIMENT_INTERVAL = 9000;

    const STATIC_BIN_ID = '687ebac9f7e7a370d1eba7fa'; 
    const PASSWORD_HE = '18092000';
    const PASSWORD_SHE = '06112002';
    
    // --- DOM –≠–õ–ï–ú–ï–ù–¢–´ ---
    const dom = {
        loader: document.getElementById('loader'),
        app: document.getElementById('app'),
        roomScreen: document.getElementById('room-screen'),
        mainContent: document.getElementById('main-content'),
        passwordInput: document.getElementById('password-input'),
        loginBtn: document.getElementById('login-btn'),
        tabs: document.querySelectorAll('.tab-link'),
        tabContents: document.querySelectorAll('.tab-content'),
        heHeart: document.getElementById('he-heart'),
        sheHeart: document.getElementById('she-heart'),
        heEmoji: document.getElementById('he-emoji'),
        sheEmoji: document.getElementById('she-emoji'),
        controls: document.getElementById('controls'),
        colorPalette: document.getElementById('color-palette'),
        emojiPalette: document.getElementById('emoji-palette'),
        confirmChoiceBtn: document.getElementById('confirm-choice-btn'),
        complimentText: document.getElementById('compliment-text'),
        qotdQuestion: document.getElementById('qotd-question'),
        myAnswerInput: document.getElementById('my-answer-input'),
        submitAnswerBtn: document.getElementById('submit-answer-btn'),
        partnerAnswerDiv: document.getElementById('qotd-partner-answer'),
        partnerAnswerText: document.getElementById('partner-answer-text'),
        qotdStatus: document.getElementById('qotd-status'),
        inventoryList: document.getElementById('inventory-list'),
        syncScoreBar: document.getElementById('sync-score-bar'),
        gameStory: document.getElementById('game-story'),
        gameChoices: document.getElementById('game-choices'),
        gameStatus: document.getElementById('game-status'),
        historyList: document.getElementById('history-list'),
        sendKissBtn: document.getElementById('send-kiss-btn'),
        sendHugBtn: document.getElementById('send-hug-btn'),
        animationContainer: document.getElementById('action-animation-container'),
    };
    
    // --- –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ---
    let state = { binId: null, userRole: null, pollingTimer: null, complimentTimer: null, localData: null, lastActionTimestamp: 0 };
    
    // --- –î–ê–ù–ù–´–ï (–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã, –í–æ–ø—Ä–æ—Å—ã, –ò–≥—Ä–∞) ---
    const compliments = [ "–Ø –ª—é–±–ª—é —Ç–µ–±—è –¥–æ –ª—É–Ω—ã –∏ –æ–±—Ä–∞—Ç–Ω–æ.", "–°–∫—É—á–∞—é –ø–æ —Ç–≤–æ–µ–º—É –≥–æ–ª–æ—Å—É.", "–¢—ã - –º–æ—ë —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.", "–ö–∞–∂–¥–∞—è —Å–µ–∫—É–Ω–¥–∞ –±–µ–∑ —Ç–µ–±—è - –≤–µ—á–Ω–æ—Å—Ç—å.", "–ú—ã —Å–ø—Ä–∞–≤–∏–º—Å—è —Å –ª—é–±—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º.", "–î—É–º–∞—é –æ —Ç–µ–±–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.", "–¢—ã –¥–µ–ª–∞–µ—à—å –º–æ–π –º–∏—Ä —è—Ä—á–µ.", "–°–∫–æ—Ä–µ–π –±—ã —Ç–µ–±—è –æ–±–Ω—è—Ç—å.", "–¢—ã –º–æ—ë —Å–æ–ª–Ω—ã—à–∫–æ –≤ –ø–∞—Å–º—É—Ä–Ω—ã–π –¥–µ–Ω—å.", "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã –µ—Å—Ç—å —É –º–µ–Ω—è.", "–¢—ã ‚Äî –ø—Ä–∏—á–∏–Ω–∞ –º–æ–µ–π —É–ª—ã–±–∫–∏.", "–ù–∞—à–∏ —Å–µ—Ä–¥—Ü–∞ –±—å—é—Ç—Å—è –≤ —É–Ω–∏—Å–æ–Ω." ];
    const questions = [ "–ö–∞–∫–æ–µ —Ç–≤–æ—ë —Å–∞–º–æ–µ —Ç—ë–ø–ª–æ–µ –¥–µ—Ç—Å–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ?", "–ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥(–ª–∞) –∏–º–µ—Ç—å –ª—é–±—É—é —Å—É–ø–µ—Ä—Å–∏–ª—É, –∫–∞–∫—É—é –±—ã —Ç—ã –≤—ã–±—Ä–∞–ª(–∞)?", "–û–ø–∏—à–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–ª—è —Ç–µ–±—è –¥–µ–Ω—å.", "–ß—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–±—è —Å–º–µ—è—Ç—å—Å—è –¥–æ —Å–ª—ë–∑?", "–ö–∞–∫–æ–µ –Ω–∞—à–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è —Å–∞–º–æ–µ —Ü–µ–Ω–Ω–æ–µ?", "–ö—É–¥–∞ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ –º–Ω–æ–π –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?", "–ß–µ–º—É —Ç—ã –Ω–∞—É—á–∏–ª—Å—è(–∞—Å—å) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥?", "–ö–∞–∫–∞—è –ø–µ—Å–Ω—è –≤—Å–µ–≥–¥–∞ –ø–æ–¥–Ω–∏–º–∞–µ—Ç —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?" ];
    const colors = ['#ff4757', '#ff6b81', '#ffa502', '#ff6348', '#1e90ff', '#4169e1', '#32ff7e', '#7bed9f', '#9b59b6', 'deeppink'];
    const emojis = ['‚ù§Ô∏è', 'üíñ', 'ü•∞', 'üòç', 'üòò', 'ü§ó', 'üåü', '‚ú®', 'üî•', 'üîê'];
    const gameData = { /* ... (–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–≥—Ä—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π) ... */ };

    // --- –§–£–ù–ö–¶–ò–ò-–ü–û–ú–û–©–ù–ò–ö–ò ---
    function showScreen(screenName) {
        dom.loader.classList.add('hidden');
        dom.app.classList.add('hidden');
        dom.roomScreen.classList.add('hidden');
        dom.mainContent.classList.add('hidden');

        if (screenName === 'loader') dom.loader.classList.remove('hidden');
        else if (screenName === 'room') { dom.app.classList.remove('hidden'); dom.roomScreen.classList.remove('hidden'); }
        else if (screenName === 'main') { dom.app.classList.remove('hidden'); dom.mainContent.classList.remove('hidden'); }
    }

    // --- API JSONBIN.IO ---
    async function apiCall(url, method = 'GET', body = null) {
        const headers = { 'Content-Type': 'application/json', 'X-Master-Key': X_MASTER_KEY, 'X-Access-Key': '$2a$10$EIdkYYUdFQ6kRpT0OobuU.YjsENOEz9Un3ljT398QIIR0nRqXmFEq' };
        try {
            const options = { method, headers, body: body ? JSON.stringify(body) : null };
            const response = await fetch(url, options);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            if (response.status === 204 || response.status === 201) return {};
            return await response.json();
        } catch (error) { console.error("API call failed:", error); alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É."); return null; }
    }
    const readBin = async (binId) => (await apiCall(`${JSONBIN_URL}/${binId}/latest`))?.record;
    const updateBin = (binId, data) => apiCall(`${JSONBIN_URL}/${binId}`, 'PUT', data);
    
    // --- –õ–û–ì–ò–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
    function switchTab(tabId) { dom.tabs.forEach(t => t.classList.toggle('active', t.dataset.tab === tabId)); dom.tabContents.forEach(c => c.classList.toggle('active', c.id === `${tabId}-tab`)); }
    function startComplimentCycle() { if (state.complimentTimer) clearInterval(state.complimentTimer); state.complimentTimer = setInterval(() => { dom.complimentText.style.opacity = 0; setTimeout(() => { dom.complimentText.textContent = compliments[Math.floor(Math.random() * compliments.length)]; dom.complimentText.style.opacity = 1; }, 1000); }, COMPLIMENT_INTERVAL); }

    function getInitialState() {
        return { hearts: { he: { color: '#4169e1', emoji: '‚ù§Ô∏è' }, she: { color: '#ff69b4', emoji: '‚ù§Ô∏è' } }, qotd: { date: "1970-01-01", answers: { he: null, she: null } }, action: { from: null, type: null, timestamp: 0 }, qotdHistory: [], game: { node: 'start', choices: { he: null, she: null }, inventory: [], syncScore: 50 } };
    }
    
    // --- –û–ë–ù–û–í–õ–ï–ù–ò–ï UI ---
    function updateUI(data) {
        // –°–µ—Ä–¥—Ü–∞
        dom.heHeart.style.color = data.hearts.he.color;
        dom.heEmoji.textContent = data.hearts.he.emoji;
        dom.sheHeart.style.color = data.hearts.she.color;
        dom.sheEmoji.textContent = data.hearts.she.emoji;

        // –í–æ–ø—Ä–æ—Å –î–Ω—è
        const today = new Date().toISOString().slice(0, 10);
        if(data.qotd.date !== today) {
             dom.myAnswerInput.value = '';
             dom.myAnswerInput.disabled = false;
             dom.submitAnswerBtn.disabled = false;
             dom.qotdPartnerAnswer.classList.add('hidden');
        }
        const questionIndex = new Date(today).getDate() % questions.length;
        dom.qotdQuestion.textContent = questions[questionIndex];

        const myAnswer = data.qotd.answers[state.userRole];
        const partnerRole = state.userRole === 'he' ? 'she' : 'he';
        const partnerAnswer = data.qotd.answers[partnerRole];

        if (myAnswer) {
            dom.myAnswerInput.value = myAnswer;
            dom.myAnswerInput.disabled = true;
            dom.submitAnswerBtn.disabled = true;
            dom.qotdStatus.textContent = partnerAnswer ? "–û–±–∞ –æ—Ç–≤–µ—Ç–∏–ª–∏! –û—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é." : "–û—Ç–ª–∏—á–Ω–æ! –ñ–¥—ë–º –æ—Ç–≤–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞...";
        }
        if (partnerAnswer) {
            dom.qotdPartnerAnswer.classList.remove('hidden');
            dom.partnerAnswerText.textContent = partnerAnswer;
        }

        // –ò—Å—Ç–æ—Ä–∏—è
        dom.historyList.innerHTML = '';
        if (data.qotdHistory && data.qotdHistory.length > 0) {
            data.qotdHistory.slice().reverse().forEach(item => {
                const itemEl = document.createElement('div');
                itemEl.className = 'history-item';
                itemEl.innerHTML = `<div class="date">${item.date}</div><div class="question">"${item.question}"</div><div class="answer he"><strong>–û–Ω:</strong> ${item.answers.he}</div><div class="answer she"><strong>–û–Ω–∞:</strong> ${item.answers.she}</div>`;
                dom.historyList.appendChild(itemEl);
            });
        }

        // –ê–Ω–∏–º–∞—Ü–∏–∏
        if (data.action.timestamp > state.lastActionTimestamp) {
            state.lastActionTimestamp = data.action.timestamp;
            if (data.action.from !== state.userRole) {
                if (data.action.type === 'kiss') { /* ... –ª–æ–≥–∏–∫–∞ –ø–æ—Ü–µ–ª—É—è ... */ }
                else if (data.action.type === 'hug') { /* ... –ª–æ–≥–∏–∫–∞ –æ–±—ä—è—Ç–∏—è ... */ }
            }
        }
    }

    // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ---
    function handleLogin() { /* ... –ª–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ ... */ }
    function openControls(role) { if (role === state.userRole) { dom.controls.classList.remove('hidden'); dom.controls.dataset.editing = role; } else { alert("–ú–µ–Ω—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å–≤–æ—ë —Å–µ—Ä–¥–µ—á–∫–æ :)"); } }
    async function handleConfirmChoice() { /* ... –ª–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã —Å–µ—Ä–¥—Ü–∞ ... */ }
    async function handleSubmitAnswer() { /* ... –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é ... */ }
    async function sendAction(type) { /* ... –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Ü–µ–ª—É—è/–æ–±—ä—è—Ç–∏—è ... */ }
    
    // --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
    function setupEventListeners() {
        dom.loginBtn.addEventListener('click', handleLogin);
        dom.passwordInput.addEventListener('keyup', (e) => e.key === 'Enter' && handleLogin());
        dom.tabs.forEach(tab => tab.addEventListener('click', () => switchTab(tab.dataset.tab)));
        dom.heHeart.addEventListener('click', () => openControls('he'));
        dom.sheHeart.addEventListener('click', () => openControls('she'));
        dom.confirmChoiceBtn.addEventListener('click', handleConfirmChoice);
        dom.submitAnswerBtn.addEventListener('click', handleSubmitAnswer);
        dom.sendKissBtn.addEventListener('click', () => sendAction('kiss'));
        dom.sendHugBtn.addEventListener('click', () => sendAction('hug'));
    }

    async function startSession(binId, role) {
        state.binId = binId;
        state.userRole = role;
        showScreen('main');
        
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–ª–∏—Ç—Ä
        dom.colorPalette.innerHTML = colors.map(c => `<div class="color-swatch" style="background-color:${c}" data-color="${c}"></div>`).join('');
        dom.emojiPalette.innerHTML = emojis.map(e => `<div class="emoji-swatch" data-emoji="${e}">${e}</div>`).join('');
        document.querySelectorAll('.color-swatch, .emoji-swatch').forEach(el => el.addEventListener('click', (e) => {
            e.target.parentElement.querySelectorAll('.swatch-selected').forEach(s => s.classList.remove('swatch-selected'));
            e.target.classList.add('swatch-selected');
        }));

        startComplimentCycle();
        
        await pollServer();
        state.pollingTimer = setInterval(pollServer, POLLING_INTERVAL);
    }
    
    async function pollServer() {
        if (!state.binId) return;
        const data = await readBin(state.binId);
        if (data) {
            if (!data.version) { // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–∏–Ω –Ω–µ –ø—É—Å—Ç–æ–π. –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º.
                const initialData = getInitialState();
                await updateBin(state.binId, initialData);
                if (JSON.stringify(initialData) !== JSON.stringify(state.localData)) updateUI(initialData);
                state.localData = initialData;
            } else if (JSON.stringify(data) !== JSON.stringify(state.localData)) {
                state.localData = data;
                updateUI(data);
            }
        }
    }
    
    function init() {
        showScreen('loader');
        setTimeout(() => {
            dom.loader.classList.add('fade-out');
            setTimeout(() => {
                showScreen('room');
            }, 1000);
        }, 3000);
        setupEventListeners();
    }

    init();
});
