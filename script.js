document.addEventListener('DOMContentLoaded', () => {
    // --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
    const X_MASTER_KEY = '$2a$10$EIdkYYUdFQ6kRpT0OobuU.YjsENOEz9Un3ljT398QIIR0nRqXmFEq';
    const JSONBIN_URL = 'https://api.jsonbin.io/v3/b';
    const POLLING_INTERVAL = 3500;
    const COMPLIMENT_INTERVAL = 9000;

    const STATIC_BIN_ID = '687ebac9f7e7a370d1eba7fa'; 
    const CODE_FOR_HE = '06112002'; // –ï—ë –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ "–ï–≥–æ"
    const CODE_FOR_SHE = '18092000'; // –ï–≥–æ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ "–ï—ë"
    
    // --- DOM –≠–õ–ï–ú–ï–ù–¢–´ ---
    const dom = {
        loader: document.getElementById('loader'),
        app: document.getElementById('app'),
        roomScreen: document.getElementById('room-screen'),
        mainContent: document.getElementById('main-content'),
        loginCodeInput: document.getElementById('login-code-input'),
        loginBtn: document.getElementById('login-btn'),
        tabs: document.querySelectorAll('.tab-link'),
        tabContents: document.querySelectorAll('.tab-content'),
        heHeart: document.getElementById('he-heart'),
        sheHeart: document.getElementById('she-heart'),
        heEmoji: document.getElementById('he-emoji'),
        sheEmoji: document.getElementById('she-emoji'),
        controls: document.getElementById('controls'),
        colorPalette: document.getElementById('color-palette'),
        emojiPalette: document.getElementById('emoji-palette'),
        confirmChoiceBtn: document.getElementById('confirm-choice-btn'),
        complimentText: document.getElementById('compliment-text'),
        qotdQuestion: document.getElementById('qotd-question'),
        myAnswerInput: document.getElementById('my-answer-input'),
        submitAnswerBtn: document.getElementById('submit-answer-btn'),
        partnerAnswerDiv: document.getElementById('qotd-partner-answer'),
        partnerAnswerText: document.getElementById('partner-answer-text'),
        qotdStatus: document.getElementById('qotd-status'),
        inventoryList: document.getElementById('inventory-list'),
        syncScoreBar: document.getElementById('sync-score-bar'),
        gameStory: document.getElementById('game-story'),
        gameChoices: document.getElementById('game-choices'),
        gameStatus: document.getElementById('game-status'),
        historyList: document.getElementById('history-list'),
        sendKissBtn: document.getElementById('send-kiss-btn'),
        sendHugBtn: document.getElementById('send-hug-btn'),
        animationContainer: document.getElementById('action-animation-container'),
    };
    
    // --- –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ---
    let state = { binId: null, userRole: null, pollingTimer: null, complimentTimer: null, localData: null, lastActionTimestamp: 0 };
    
    // --- –î–ê–ù–ù–´–ï (–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã, –í–æ–ø—Ä–æ—Å—ã, –ò–≥—Ä–∞ –∏ —Ç.–¥.) ---
    const compliments = [ "–Ø –ª—é–±–ª—é —Ç–µ–±—è –¥–æ –ª—É–Ω—ã –∏ –æ–±—Ä–∞—Ç–Ω–æ.", "–°–∫—É—á–∞—é –ø–æ —Ç–≤–æ–µ–º—É –≥–æ–ª–æ—Å—É.", "–¢—ã - –º–æ—ë —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.", "–ö–∞–∂–¥–∞—è —Å–µ–∫—É–Ω–¥–∞ –±–µ–∑ —Ç–µ–±—è - –≤–µ—á–Ω–æ—Å—Ç—å.", "–ú—ã —Å–ø—Ä–∞–≤–∏–º—Å—è —Å –ª—é–±—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º.", "–î—É–º–∞—é –æ —Ç–µ–±–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.", "–¢—ã –¥–µ–ª–∞–µ—à—å –º–æ–π –º–∏—Ä —è—Ä—á–µ.", "–°–∫–æ—Ä–µ–π –±—ã —Ç–µ–±—è –æ–±–Ω—è—Ç—å.", "–¢—ã –º–æ—ë —Å–æ–ª–Ω—ã—à–∫–æ –≤ –ø–∞—Å–º—É—Ä–Ω—ã–π –¥–µ–Ω—å.", "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã –µ—Å—Ç—å —É –º–µ–Ω—è.", "–¢—ã ‚Äî –ø—Ä–∏—á–∏–Ω–∞ –º–æ–µ–π —É–ª—ã–±–∫–∏.", "–ù–∞—à–∏ —Å–µ—Ä–¥—Ü–∞ –±—å—é—Ç—Å—è –≤ —É–Ω–∏—Å–æ–Ω." ];
    const questions = [ "–ö–∞–∫–æ–µ —Ç–≤–æ—ë —Å–∞–º–æ–µ —Ç—ë–ø–ª–æ–µ –¥–µ—Ç—Å–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ?", "–ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥(–ª–∞) –∏–º–µ—Ç—å –ª—é–±—É—é —Å—É–ø–µ—Ä—Å–∏–ª—É, –∫–∞–∫—É—é –±—ã —Ç—ã –≤—ã–±—Ä–∞–ª(–∞)?", "–û–ø–∏—à–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–ª—è —Ç–µ–±—è –¥–µ–Ω—å.", "–ß—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–±—è —Å–º–µ—è—Ç—å—Å—è –¥–æ —Å–ª—ë–∑?", "–ö–∞–∫–æ–µ –Ω–∞—à–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è —Å–∞–º–æ–µ —Ü–µ–Ω–Ω–æ–µ?", "–ö—É–¥–∞ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ –º–Ω–æ–π –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?", "–ß–µ–º—É —Ç—ã –Ω–∞—É—á–∏–ª—Å—è(–∞—Å—å) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥?", "–ö–∞–∫–∞—è –ø–µ—Å–Ω—è –≤—Å–µ–≥–¥–∞ –ø–æ–¥–Ω–∏–º–∞–µ—Ç —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?" ];
    const colors = ['#ff4757', '#ff6b81', '#ffa502', '#ff6348', '#1e90ff', '#4169e1', '#32ff7e', '#7bed9f', '#9b59b6', 'deeppink'];
    const emojis = ['‚ù§Ô∏è', 'üíñ', 'ü•∞', 'üòç', 'üòò', 'ü§ó', 'üåü', '‚ú®', 'üî•', 'üîê'];
    const gameData = {
        'start': { text: "–í—ã —Å—Ç–æ–∏—Ç–µ –Ω–∞ –ø–æ—Ä–æ–≥–µ –ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –õ–µ—Å–∞. –õ—É–Ω–∞ –¥–∞—Ä–∏—Ç –≤–∞–º '–õ—É–Ω–Ω—ã–π –∫–∞–º–µ–Ω—å'. –ö—É–¥–∞ –ø–æ–π–¥—ë—Ç–µ?", choices: [{ text: '–í —Ç—ë–º–Ω—É—é —á–∞—â—É', id: 'a' }, { text: '–ö –º–µ—Ä—Ü–∞—é—â–µ–º—É –æ–∑–µ—Ä—É', id: 'b' }], onEnter: { addItem: '–õ—É–Ω–Ω—ã–π –∫–∞–º–µ–Ω—å' }, outcomes: { 'a_a': { to: 'deep_forest', sync: 10 }, 'b_b': { to: 'lake_shore', sync: 10 }, 'a_b': { to: 'mixed_path_1', sync: -10 }, 'b_a': { to: 'mixed_path_1', sync: -10 } } },
        'deep_forest': { text: "–í —á–∞—â–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ —Å—É–Ω–¥—É–∫ –∏ —Å–≤–µ—Ç–ª—è—á–∫–æ–≤ —É –¥—É–±–∞. –ß—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ?", choices: [{ text: '–û—Ç–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫', id: 'a' }, { text: '–ü–æ–π—Ç–∏ –∫ –¥—É–±—É', id: 'b' }], outcomes: { 'a_a': { to: 'chest_open' }, 'b_b': { to: 'oak_success', sync: 15 }, 'a_b': { to: 'forest_fail' }, 'b_a': { to: 'forest_fail', sync: -5 } } },
        'chest_open': { text: "–í —Å—É–Ω–¥—É–∫–µ –ª–µ–∂–∏—Ç '–ö–∞—Ä—Ç–∞ —Å–æ–∑–≤–µ–∑–¥–∏–π'.", choices: [{ text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å', id: 'a' }], onEnter: { addItem: '–ö–∞—Ä—Ç–∞ —Å–æ–∑–≤–µ–∑–¥–∏–π' }, outcomes: { 'a_a': { to: 'star_bridge' } } },
        'lake_shore': { text: "–£ –æ–∑–µ—Ä–∞ —Å—Ç–æ–∏—Ç –ª–æ–¥–∫–∞, –∞ –≤ –≤–æ–¥–µ —á—Ç–æ-—Ç–æ –±–ª–µ—Å—Ç–∏—Ç.", choices: [{ text: '–í–∑—è—Ç—å –ª–æ–¥–∫—É', id: 'a' }, { text: '–î–æ—Å—Ç–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –≤–æ–¥—ã', id: 'b' }], outcomes: { 'a_a': { to: 'boat_success', sync: 5 }, 'b_b': { to: 'crystal_found', sync: 5 }, 'a_b': { to: 'lake_fail' }, 'b_a': { to: 'lake_fail', sync: -5 } } },
        'crystal_found': { text: "–í—ã –Ω–∞—à–ª–∏ '–í–æ–¥–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª'!", choices: [{ text: '–ò–¥—Ç–∏ –¥–∞–ª—å—à–µ', id: 'a' }], onEnter: { addItem: '–í–æ–¥–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª' }, outcomes: { 'a_a': { to: 'star_bridge' } } },
        'star_bridge': { text: "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –ø—Ä–æ–ø–∞—Å—Ç—å. –ù—É–∂–Ω–∞ '–ö–∞—Ä—Ç–∞ —Å–æ–∑–≤–µ–∑–¥–∏–π' —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏.", choices: [{ text: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É', id: 'a', requiresItem: '–ö–∞—Ä—Ç–∞ —Å–æ–∑–≤–µ–∑–¥–∏–π' }, { text: '–ò—Å–∫–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—É—Ç—å', id: 'b' }], outcomes: { 'a_a': { to: 'good_ending_moon' }, 'b_b': { to: 'bad_ending_lost' } } },
        'good_ending_moon': { text: "–ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–ª–∞ –º–æ—Å—Ç –∏–∑ –∑–≤—ë–∑–¥! –í—ã –ø–µ—Ä–µ—à–ª–∏ –µ–≥–æ, –∏ –≤–∞—à–∞ –ª—é–±–æ–≤—å —Å—Ç–∞–ª–∞ —á–∞—Å—Ç—å—é –≤–µ—á–Ω–æ—Å—Ç–∏. (–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞)", choices: [] },
        'bad_ending_lost': { text: "–í—ã –∑–∞–±–ª—É–¥–∏–ª–∏—Å—å, –Ω–æ –≤—ã –≤—Å—ë –µ—â—ë –≤–º–µ—Å—Ç–µ. –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ ‚Äî –Ω–∞–π—Ç–∏ –≤—ã—Ö–æ–¥ —Ä—É–∫–∞ –æ–± —Ä—É–∫—É. (–ü–ª–æ—Ö–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞)", choices: [] },
    };

    // --- –§–£–ù–ö–¶–ò–ò-–ü–û–ú–û–©–ù–ò–ö–ò ---
    function showScreen(screenName) {
        dom.loader.classList.add('hidden');
        dom.app.classList.add('hidden');
        dom.roomScreen.classList.add('hidden');
        dom.mainContent.classList.add('hidden');

        if (screenName === 'loader') dom.loader.classList.remove('hidden');
        else if (screenName === 'room') { dom.app.classList.remove('hidden'); dom.roomScreen.classList.remove('hidden'); }
        else if (screenName === 'main') { dom.app.classList.remove('hidden'); dom.mainContent.classList.remove('hidden'); }
    }

    function getInitialState() {
        return {
            hearts: { he: { color: '#4169e1', emoji: '‚ù§Ô∏è' }, she: { color: '#ff69b4', emoji: '‚ù§Ô∏è' } },
            qotd: { date: "1970-01-01", answers: { he: null, she: null } },
            action: { from: null, type: null, timestamp: 0 },
            qotdHistory: [],
            game: { node: 'start', choices: { he: null, she: null }, inventory: [], syncScore: 50 },
        };
    }

    // --- API JSONBIN.IO ---
    async function apiCall(url, method = 'GET', body = null) {
        const headers = { 'Content-Type': 'application/json', 'X-Master-Key': X_MASTER_KEY, 'X-Access-Key': '$2a$10$EIdkYYUdFQ6kRpT0OobuU.YjsENOEz9Un3ljT398QIIR0nRqXmFEq' };
        try {
            const options = { method, headers, body: body ? JSON.stringify(body) : null };
            const response = await fetch(url, options);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            if (response.status === 204 || response.status === 201) return {};
            return await response.json();
        } catch (error) { console.error("API call failed:", error); alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É."); return null; }
    }
    const readBin = async (binId) => (await apiCall(`${JSONBIN_URL}/${binId}/latest`))?.record;
    const updateBin = (binId, data) => apiCall(`${JSONBIN_URL}/${binId}`, 'PUT', data);
    
    // --- –õ–û–ì–ò–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
    function switchTab(tabId) { dom.tabs.forEach(t => t.classList.toggle('active', t.dataset.tab === tabId)); dom.tabContents.forEach(c => c.classList.toggle('active', c.id === `${tabId}-tab`)); }
    
    function startComplimentCycle() {
        if (state.complimentTimer) clearInterval(state.complimentTimer);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç —Å—Ä–∞–∑—É
        dom.complimentText.textContent = compliments[Math.floor(Math.random() * compliments.length)];
        dom.complimentText.style.opacity = 1;

        state.complimentTimer = setInterval(() => {
            dom.complimentText.style.opacity = 0;
            setTimeout(() => {
                dom.complimentText.textContent = compliments[Math.floor(Math.random() * compliments.length)];
                dom.complimentText.style.opacity = 1;
            }, 1000);
        }, COMPLIMENT_INTERVAL);
    }
    
    // --- –û–ë–ù–û–í–õ–ï–ù–ò–ï UI ---
    function updateUI(data) {
        state.localData = data;
        
        // –°–µ—Ä–¥—Ü–∞
        dom.heHeart.style.color = data.hearts.he.color;
        dom.heEmoji.textContent = data.hearts.he.emoji;
        dom.sheHeart.style.color = data.hearts.she.color;
        dom.sheEmoji.textContent = data.hearts.she.emoji;

        // –í–æ–ø—Ä–æ—Å –î–Ω—è
        const today = new Date().toISOString().slice(0, 10);
        let currentQuestion = data.qotd;
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã
        if(currentQuestion.date !== today) {
            currentQuestion = { date: today, answers: { he: null, she: null } };
        }
        
        const questionIndex = new Date(today).getDate() % questions.length;
        dom.qotdQuestion.textContent = questions[questionIndex];

        const myAnswer = currentQuestion.answers[state.userRole];
        const partnerRole = state.userRole === 'he' ? 'she' : 'he';
        const partnerAnswer = currentQuestion.answers[partnerRole];

        dom.myAnswerInput.disabled = !!myAnswer;
        dom.submitAnswerBtn.disabled = !!myAnswer;
        dom.myAnswerInput.value = myAnswer || '';

        dom.qotdPartnerAnswer.classList.toggle('hidden', !partnerAnswer);
        dom.partnerAnswerText.textContent = partnerAnswer || '';
        
        if (myAnswer) {
            dom.qotdStatus.textContent = partnerAnswer ? "–û–±–∞ –æ—Ç–≤–µ—Ç–∏–ª–∏! –û—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é." : "–û—Ç–ª–∏—á–Ω–æ! –ñ–¥—ë–º –æ—Ç–≤–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞...";
        } else {
            dom.qotdStatus.textContent = partnerAnswer ? "–ü–∞—Ä—Ç–Ω—ë—Ä —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª. –¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!" : "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç...";
        }


        // –ò—Å—Ç–æ—Ä–∏—è
        dom.historyList.innerHTML = '';
        if (data.qotdHistory && data.qotdHistory.length > 0) {
            data.qotdHistory.slice().reverse().forEach(item => {
                const itemEl = document.createElement('div');
                itemEl.className = 'history-item';
                itemEl.innerHTML = `<div class="date">${item.date}</div><div class="question">"${item.question}"</div><div class="answer he"><strong>–û–Ω:</strong> ${item.answers.he}</div><div class="answer she"><strong>–û–Ω–∞:</strong> ${item.answers.she}</div>`;
                dom.historyList.appendChild(itemEl);
            });
        } else {
            dom.historyList.innerHTML = '<p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ "–í–æ–ø—Ä–æ—Å –¥–Ω—è".</p>';
        }

        // –ê–Ω–∏–º–∞—Ü–∏–∏
        if (data.action && data.action.timestamp > state.lastActionTimestamp) {
            state.lastActionTimestamp = data.action.timestamp;
            if (data.action.from !== state.userRole) {
                // ... –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π...
            }
        }
    }

    // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ---
    function handleLogin() {
        const code = dom.loginCodeInput.value;
        let userRole = null;

        if (code === CODE_FOR_HE) {
            userRole = 'he';
        } else if (code === CODE_FOR_SHE) {
            userRole = 'she';
        }

        if (userRole) {
            startSession(STATIC_BIN_ID, userRole);
        } else {
            alert('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            dom.loginCodeInput.value = '';
        }
    }

    function openControls(role) {
        if (role === state.userRole) {
            dom.controls.classList.remove('hidden');
            dom.controls.dataset.editing = role;
        } else {
            alert("–ú–µ–Ω—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å–≤–æ—ë —Å–µ—Ä–¥–µ—á–∫–æ :)");
        }
    }

    async function handleConfirmChoice() {
        const role = dom.controls.dataset.editing;
        const selectedColor = dom.colorPalette.querySelector('.swatch-selected');
        const selectedEmoji = dom.emojiPalette.querySelector('.swatch-selected');
        if (!role || !selectedColor || !selectedEmoji) return;
        
        const newData = { ...state.localData };
        newData.hearts[role].color = selectedColor.dataset.color;
        newData.hearts[role].emoji = selectedEmoji.dataset.emoji;
        
        dom.controls.classList.add('hidden');
        updateUI(newData); // –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        await updateBin(state.binId, newData);
    }
    
    async function handleSubmitAnswer() {
        const answer = dom.myAnswerInput.value.trim();
        if (!answer) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç.');
            return;
        }
        
        const today = new Date().toISOString().slice(0, 10);
        const questionIndex = new Date(today).getDate() % questions.length;
        const questionText = questions[questionIndex];

        let newData = JSON.parse(JSON.stringify(state.localData));

        // –ï—Å–ª–∏ –¥–µ–Ω—å —Å–º–µ–Ω–∏–ª—Å—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç qotd
        if(newData.qotd.date !== today) {
            newData.qotd = { date: today, answers: { he: null, she: null } };
        }

        newData.qotd.answers[state.userRole] = answer;
        
        const partnerRole = state.userRole === 'he' ? 'she' : 'he';
        // –ï—Å–ª–∏ –ø–∞—Ä—Ç–Ω—ë—Ä —Ç–æ–∂–µ –æ—Ç–≤–µ—Ç–∏–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        if (newData.qotd.answers[partnerRole]) {
            if (!newData.qotdHistory) newData.qotdHistory = [];
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å
            const alreadyExists = newData.qotdHistory.some(item => item.date === today);
            if (!alreadyExists) {
                newData.qotdHistory.push({
                    date: today,
                    question: questionText,
                    answers: newData.qotd.answers
                });
            }
        }
        
        updateUI(newData);
        await updateBin(state.binId, newData);
    }

    async function sendAction(type) {
        const newData = { ...state.localData, action: { from: state.userRole, type: type, timestamp: Date.now() } };
        updateUI(newData);
        await updateBin(state.binId, newData);
    }
    
    // --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
    function setupEventListeners() {
        dom.loginBtn.addEventListener('click', handleLogin);
        dom.loginCodeInput.addEventListener('keyup', (e) => e.key === 'Enter' && handleLogin());
        dom.tabs.forEach(tab => tab.addEventListener('click', () => switchTab(tab.dataset.tab)));
        dom.heHeart.addEventListener('click', () => openControls('he'));
        dom.sheHeart.addEventListener('click', () => openControls('she'));
        dom.confirmChoiceBtn.addEventListener('click', handleConfirmChoice);
        dom.submitAnswerBtn.addEventListener('click', handleSubmitAnswer);
        dom.sendKissBtn.addEventListener('click', () => sendAction('kiss'));
        dom.sendHugBtn.addEventListener('click', () => sendAction('hug'));
    }

    async function startSession(binId, role) {
        state.binId = binId;
        state.userRole = role;
        showScreen('main');
        
        dom.colorPalette.innerHTML = colors.map(c => `<div class="color-swatch" style="background-color:${c}" data-color="${c}"></div>`).join('');
        dom.emojiPalette.innerHTML = emojis.map(e => `<div class="emoji-swatch" data-emoji="${e}">${e}</div>`).join('');
        document.querySelectorAll('.color-swatch, .emoji-swatch').forEach(el => el.addEventListener('click', (e) => {
            e.target.parentElement.querySelectorAll('.swatch-selected').forEach(s => s.classList.remove('swatch-selected'));
            e.target.classList.add('swatch-selected');
        }));

        startComplimentCycle();
        
        await pollServer();
        state.pollingTimer = setInterval(pollServer, POLLING_INTERVAL);
    }
    
    async function pollServer() {
        if (!state.binId) return;
        const data = await readBin(state.binId);
        
        // **–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï**: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã. –ï—Å–ª–∏ –Ω–µ—Ç - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º.
        if (!data || !data.hearts || !data.game) {
            const initialData = getInitialState();
            await updateBin(state.binId, initialData);
            if (JSON.stringify(initialData) !== JSON.stringify(state.localData)) {
                updateUI(initialData);
            }
        } else if (JSON.stringify(data) !== JSON.stringify(state.localData)) {
            updateUI(data);
        }
    }
    
    function init() {
        showScreen('loader');
        setTimeout(() => {
            dom.loader.classList.add('fade-out');
            setTimeout(() => {
                showScreen('room');
            }, 1000);
        }, 3000);
        setupEventListeners();
    }

    init();
});
